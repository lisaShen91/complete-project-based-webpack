'use strict';

exports.__esModule = true;
exports.Datepicker = exports.default = undefined;

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _dec, _desc, _value, _class, _init, _class2, _temp;

var _intact = require('intact');

var _intact2 = _interopRequireDefault(_intact);

var _index = require('./index.vdt');

var _index2 = _interopRequireDefault(_index);

require('../../styles/kpc.styl');

require('./index.styl');

var _calendar = require('./calendar');

var _calendar2 = _interopRequireDefault(_calendar);

var _utils = require('./utils');

var _utils2 = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var isEqual = _intact2.default.utils.isEqual;
var Datepicker = (_dec = _intact2.default.template(), (_class = (_temp = _class2 = function (_Intact) {
    (0, _inherits3.default)(Datepicker, _Intact);

    function Datepicker() {
        (0, _classCallCheck3.default)(this, Datepicker);
        return (0, _possibleConstructorReturn3.default)(this, _Intact.apply(this, arguments));
    }

    Datepicker.prototype.defaults = function defaults() {
        return {
            value: undefined,
            clearable: false,
            placeholder: undefined,
            disabled: false,
            size: 'default',
            type: 'date', // date | datetime
            range: false,
            transition: 'slidedown',

            _value: undefined, // for range
            _rangeEndDate: undefined,
            _isShow: false
        };
    };

    Datepicker.prototype._init = function _init() {
        var _this2 = this;

        this.set('_value', this.get('value'));

        // proxy _value to value
        this.on('$change:_value', function (c, v) {
            // if only select one date for range, set with undefined
            if (v && v.length === 1) {
                v = undefined;
            }
            _this2.set('value', v);
        });

        this.on('$receive:value', function (c, v) {
            _this2.set('_value', v);
        });
    };

    Datepicker.prototype.onClear = function onClear(e) {
        e.stopPropagation();
        if (this.get('range')) {
            this.set('_value', undefined);
        } else {
            this.set('value', undefined);
        }
    };

    Datepicker.prototype._hide = function _hide() {
        if (this.get('range')) return;

        this.refs.calendar.hide();
    };

    Datepicker.prototype._onShow = function _onShow(c) {
        var feedback = c.get('_feedback');
        this.set('transition', (0, _utils2.getTransition)(feedback));
    };

    Datepicker.prototype._onChangeShow = function _onChangeShow(c, v) {
        this.set('_isShow', v);
        this._hasSelectByArrowKey = false;
    };

    Datepicker.prototype._onChangeShowDate = function _onChangeShowDate(type, c, v) {
        var begin = this.refs.begin;
        var end = this.refs.end;
        if (type === 'begin') {
            var endShowDate = end.getShowDate();
            endShowDate.setDate(1);
            if (v >= endShowDate) {
                var _endShowDate = new Date(v);
                _endShowDate.setMonth(_endShowDate.getMonth() + 1);
                end.setShowDate(_endShowDate);
            }
        } else {
            var beginShowDate = begin.getShowDate();
            v.setDate(1);
            if (v <= beginShowDate) {
                var _beginShowDate = new Date(v);
                _beginShowDate.setMonth(_beginShowDate.getMonth() - 1);
                begin.setShowDate(_beginShowDate);
            }
        }
    };

    Datepicker.prototype._setBeginShowDate = function _setBeginShowDate(c) {
        var _ref = this.get('_value') || [],
            start = _ref[0];

        var date = start ? new Date(start) : (0, _utils.getNowDate)();
        c.set('_showDate', date, { silent: true });
    };

    Datepicker.prototype._setEndShowDate = function _setEndShowDate(c) {
        var _ref2 = this.get('_value') || [],
            start = _ref2[0],
            end = _ref2[1];

        var date = void 0;
        // if in the same month, show next month
        if (start && end) {
            start = new Date(start);
            end = new Date(end);
            if (start.getFullYear() === end.getFullYear() && start.getMonth() === end.getMonth()) {
                end.setMonth(end.getMonth() + 1);
            }
            date = end;
        } else {
            date = (0, _utils.getNowDate)();
            date.setMonth(date.getMonth() + 1);
        }

        c.set('_showDate', date, { silent: true });
    };

    Datepicker.prototype._checkDateInRange = function _checkDateInRange(date, isOut) {
        var _ref3 = this.get('_value') || [],
            start = _ref3[0],
            end = _ref3[1];

        var _rangeEndDate = this.get('_rangeEndDate');

        if (start) {
            var _start = new Date(start);
            if (end) {
                return {
                    'k-in-range': !isOut && (0, _utils.isGT)(date, _start) && (0, _utils.isLT)(date, new Date(end))
                };
            } else if (_rangeEndDate) {
                return {
                    'k-in-range': !isOut && (0, _utils.isGT)(date, _start >= _rangeEndDate ? _rangeEndDate : _start) && (0, _utils.isLT)(date, _start <= _rangeEndDate ? _rangeEndDate : _start)
                };
            }
        }
    };

    Datepicker.prototype._onChangeValueForRange = function _onChangeValueForRange(type, c, v) {
        var value = this.get('_value');

        if (isEqual(v, value)) return;

        var _refs = this.refs,
            begin = _refs.begin,
            end = _refs.end;


        if (c.isSelectTime) {
            value = value.slice(0);
            if (type === 'begin' && end.get('_isSelectTime')) {
                value[0] = v[0];
                c._index = 0;
                end._index = 1;
            } else if (type === 'end' && begin.get('_isSelectTime')) {
                value[1] = v[1];
                c._index = 1;
                begin._index = 0;
            } else {
                value[c._index] = v[c._index];
            }
            if (value.length === 2) {
                if (value[1] < value[0]) {
                    // reverse the index
                    c._index = c._index === 0 ? 1 : 0;
                }
            }
            value.sort();
            this.set('_value', value);
        } else if (!v.length) {
            // calendar cancelled the selected value
            this.set('_value', undefined);
        } else if (!value || value.length === 0 || value.length === 2) {
            value = [v[v.length - 1]];
            if (type === 'end') {
                begin.set('_isSelectTime', false);
            } else {
                end.set('_isSelectTime', false);
            }
            c._index = 0;
            this.set('_value', value);
        } else {
            value = value.slice(0);
            value[1] = v[v.length - 1];
            // set time
            if (this.get('type') === 'datetime') {
                var _value$1$split = value[1].split(' '),
                    date = _value$1$split[0];

                var _value$0$split = value[0].split(' '),
                    time = _value$0$split[1];

                value[1] = [date, time].join(' ');
            }
            if (value[1] < value[0]) {
                c._index = 0;
            } else {
                c._index = 1;
            }
            value.sort();
            this.set('_value', value);

            if (this.get('type') !== 'datetime') {
                this.refs.calendar.hide();
            }
        }
    };

    Datepicker.prototype._highlightRangeDays = function _highlightRangeDays(date, isOut) {
        var _ref4 = this.get('_value') || [],
            start = _ref4[0],
            end = _ref4[1];

        if (start && !end) {
            this.set('_rangeEndDate', date);
        } else {
            this.set('_rangeEndDate', undefined);
        }
    };

    Datepicker.prototype._clearRangeEndDate = function _clearRangeEndDate() {
        this.set('_rangeEndDate', undefined);
    };

    Datepicker.prototype._onKeydown = function _onKeydown(e) {
        switch (e.keyCode) {
            case 13:
                e.preventDefault();
                if (!this._hasSelectByArrowKey) {
                    this.refs.input.element.click();
                } else {
                    this.refs.begin._selectFocusDate();
                }
                break;
            case 9:
                this.refs.calendar.hide();
                break;
            case 38:
            case 40:
            case 37:
            case 39:
                if (this.get('_isShow')) {
                    this._hasSelectByArrowKey = true;
                    this.refs.begin._onKeydown(e);
                }
                break;
        }
    };

    Datepicker.prototype._focus = function _focus() {
        this.refs.input.focus();
    };

    /**
     * don't trigger focusout event when datepicker layer is showing
     * trigger focusout when it hidden to make FormItem to validate it
     * #46
     */


    Datepicker.prototype.onInputFocusOut = function onInputFocusOut(e) {
        if (this.get('_isShow')) {
            e.stopPropagation();
        }
    };

    Datepicker.prototype._onHide = function _onHide() {
        var input = this.refs.input;
        input.focus();
        setTimeout(function () {
            input.blur();
        });
    };

    return Datepicker;
}(_intact2.default), _class2.template = _index2.default, _class2.propTypes = {
    clearable: Boolean,
    disabled: Boolean,
    range: Boolean
}, _temp), (_applyDecoratedDescriptor(_class, 'template', [_dec], (_init = (0, _getOwnPropertyDescriptor2.default)(_class, 'template'), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
        return _init;
    }
}), _class)), _class));
exports.default = Datepicker;
exports.Datepicker = Datepicker;