'use strict';

exports.__esModule = true;
exports.Upload = exports.default = undefined;

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends3 = require('babel-runtime/helpers/extends');

var _extends4 = _interopRequireDefault(_extends3);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _from = require('babel-runtime/core-js/array/from');

var _from2 = _interopRequireDefault(_from);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _dec, _desc, _value, _class, _init, _class2, _temp;

var _intact = require('intact');

var _intact2 = _interopRequireDefault(_intact);

var _index2 = require('./index.vdt');

var _index3 = _interopRequireDefault(_index2);

require('../../styles/kpc.styl');

require('./index.styl');

var _ajaxUploader = require('./ajaxUploader');

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var index = 0;

var Upload = (_dec = _intact2.default.template(), (_class = (_temp = _class2 = function (_Intact) {
    (0, _inherits3.default)(Upload, _Intact);

    function Upload() {
        (0, _classCallCheck3.default)(this, Upload);
        return (0, _possibleConstructorReturn3.default)(this, _Intact.apply(this, arguments));
    }

    Upload.prototype.defaults = function defaults() {
        return {
            accept: undefined,
            multiple: false,
            type: 'select', // select | drag | gallery
            files: [],
            autoUpload: true,
            disabled: false,
            action: '',
            name: undefined,
            headers: undefined,
            data: undefined,
            withCredentials: false,
            limit: undefined,
            maxSize: undefined,
            defaultFiles: undefined,

            beforeUpload: function beforeUpload() {
                return true;
            },
            beforeRemove: function beforeRemove() {
                return true;
            },

            _dragOver: false,
            _showImage: false
        };
    };

    Upload.prototype._init = function _init() {
        this._counter = 0;

        var _get = this.get(),
            files = _get.files,
            defaultFiles = _get.defaultFiles;

        if (defaultFiles) {
            defaultFiles.forEach(function (file) {
                var obj = {
                    status: 'done',
                    name: file.name,
                    percent: 100,
                    uid: index++,
                    raw: file,
                    url: file.url
                };
                files.push(obj);
            });
        }
    };

    Upload.prototype.submit = function submit() {
        var _this2 = this;

        this.get('files').forEach(function (file) {
            if (file.status === 'notReady') {
                _this2._upload(file);
            }
        });
    };

    Upload.prototype._selectFile = function _selectFile() {
        if (!this.get('disabled')) {
            var input = this.refs.input;
            input.value = '';
            input.click();
        }
    };

    Upload.prototype._onInputChange = function _onInputChange(e) {
        this._addFiles(e.target.files);
    };

    Upload.prototype._addFiles = function _addFiles(fileList) {
        var _this3 = this;

        var files = this.get('files').slice(0);
        var _files = (0, _from2.default)(fileList);

        var _get2 = this.get(),
            maxSize = _get2.maxSize,
            limit = _get2.limit,
            autoUpload = _get2.autoUpload;

        if (limit && files.length + _files.length > limit) {
            var error = new Error((0, _utils._$)('超出文件数量最大限制：{limit}', { limit: limit }));
            return this.trigger('error', error, _files, files);
        }

        var status = autoUpload ? 'ready' : 'notReady';

        _files.forEach(function (file) {
            if (maxSize && file.size > maxSize * 1024) {
                var _error = new Error((0, _utils._$)('"{name}" 超出文件最大限制：{maxSize}kb', { name: file.name, maxSize: maxSize }));
                return _this3.trigger('error', _error, file, files);
            }
            var obj = {
                status: status,
                name: file.name,
                type: file.type,
                size: file.size,
                percent: 0,
                uid: index++,
                raw: file
            };
            if (URL && URL.createObjectURL) {
                obj.url = URL.createObjectURL(file);
            }
            files.push(obj);
            if (autoUpload) _this3._upload(obj);
        });

        this.set('files', files);
    };

    Upload.prototype._onDrop = function _onDrop(e) {
        this._preventDefault(e);
        this._counter = 0;
        if (!this.get('disabled')) {
            this.set('_dragOver', false);
            this._addFiles(e._rawEvent.dataTransfer.files);
        }
    };

    Upload.prototype._onDragEnter = function _onDragEnter(e) {
        e.preventDefault();
        this._counter++;
        if (this.get('_dragOver') || this.get('disabled')) return;

        this.set('_dragOver', true);
    };

    Upload.prototype._onDragLeave = function _onDragLeave(e) {
        this._counter--;
        if (!this._counter) {
            this.set('_dragOver', false);
        }
    };

    Upload.prototype._preventDefault = function _preventDefault(e) {
        e.stopPropagation();
        e.preventDefault();
    };

    Upload.prototype._upload = function () {
        var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(file) {
            var _extends2,
                _this4 = this;

            var beforeUpload, ret, files, _index, data, options;

            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            beforeUpload = this.get('beforeUpload');
                            ret = void 0;
                            _context.prev = 2;
                            _context.next = 5;
                            return beforeUpload.call(this, file, this.get('files'));

                        case 5:
                            ret = _context.sent;
                            _context.next = 10;
                            break;

                        case 8:
                            _context.prev = 8;
                            _context.t0 = _context['catch'](2);

                        case 10:
                            if (ret) {
                                _context.next = 15;
                                break;
                            }

                            files = this.get('files').slice(0);
                            _index = files.indexOf(file);

                            files.splice(_index, 1);
                            return _context.abrupt('return', this.set({ files: files }));

                        case 15:
                            data = this.get('data');
                            options = {
                                action: this.get('action'),
                                headers: this.get('headers'),
                                data: (0, _extends4.default)((_extends2 = {}, _extends2[this.get('name') || file.name] = file.raw, _extends2), (0, _utils.isFunction)(data) ? data.call(this, file) : data || {}),
                                onProgress: function onProgress(e) {
                                    _this4._onProgress(e, file);
                                },
                                onError: function onError(e) {
                                    _this4._onError(e, file);
                                },
                                onSuccess: function onSuccess(res) {
                                    _this4._onSuccess(res, file);
                                },
                                withCredentials: this.get('withCredentials')
                            };


                            file.request = (0, _ajaxUploader.request)(options);

                        case 18:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[2, 8]]);
        }));

        function _upload(_x) {
            return _ref.apply(this, arguments);
        }

        return _upload;
    }();

    Upload.prototype._onProgress = function _onProgress(e, file) {
        file.status = 'uploading';
        file.percent = e.percent;
        this.trigger('progress', e, file, this.get('files'));
        this.update();
    };

    Upload.prototype._onError = function _onError(e, file) {
        file.status = 'error';
        this.trigger('error', e, file, this.get('files'));
        this.update();
    };

    Upload.prototype._onSuccess = function _onSuccess(res, file) {
        file.status = 'done';
        this.trigger('success', res, file, this.get('files'));
        this.update();
    };

    Upload.prototype._removeFile = function () {
        var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(file, index, e) {
            var beforeRemove, files, ret;
            return _regenerator2.default.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            e.stopPropagation();
                            beforeRemove = this.get('beforeRemove');
                            files = this.get('files').slice(0);
                            ret = void 0;
                            _context2.prev = 4;
                            _context2.next = 7;
                            return beforeRemove.call(this, file, files);

                        case 7:
                            ret = _context2.sent;
                            _context2.next = 12;
                            break;

                        case 10:
                            _context2.prev = 10;
                            _context2.t0 = _context2['catch'](4);

                        case 12:
                            if (ret) {
                                files.splice(index, 1);
                                if (file.status === 'uploading') {
                                    file.request.abort();
                                }
                                this.set('files', files);
                            }

                        case 13:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, this, [[4, 10]]);
        }));

        function _removeFile(_x2, _x3, _x4) {
            return _ref2.apply(this, arguments);
        }

        return _removeFile;
    }();

    Upload.prototype._showImage = function _showImage(file) {
        this.set({
            '_showImage': true,
            '_showedFile': file
        });
    };

    return Upload;
}(_intact2.default), _class2.template = _index3.default, _class2.request = _ajaxUploader.request, _temp), (_applyDecoratedDescriptor(_class, 'template', [_dec], (_init = (0, _getOwnPropertyDescriptor2.default)(_class, 'template'), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
        return _init;
    }
}), _class)), _class));
exports.default = Upload;
exports.Upload = Upload;