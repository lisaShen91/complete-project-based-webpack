'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _button = require('../button');

var _button2 = _interopRequireDefault(_button);

var _scrollSelect = require('../scrollSelect');

var _scrollSelect2 = _interopRequireDefault(_scrollSelect);

var _grid = require('../grid');

var _utils = require('../utils');

var _utils2 = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = function (obj, _Vdt, blocks, $callee) {

    _Vdt || (_Vdt = Vdt);
    obj || (obj = {});
    blocks || (blocks = {});
    var h = _Vdt.miss.h,
        hc = _Vdt.miss.hc,
        hu = _Vdt.miss.hu,
        widgets = this && this.widgets || {},
        _blocks = {},
        __blocks = {},
        __u = _Vdt.utils,
        extend = __u.extend,
        _e = __u.error,
        _className = __u.className,
        __o = __u.Options,
        _getModel = __o.getModel,
        _setModel = __o.setModel,
        _setCheckboxModel = __u.setCheckboxModel,
        _detectCheckboxChecked = __u.detectCheckboxChecked,
        _setSelectModel = __u.setSelectModel,
        self = this.data,
        $this = this,
        scope = obj,
        Animate = self && self.Animate,
        parent = ($callee || {})._super;

    var _self$get = self.get(),
        value = _self$get.value,
        maxDate = _self$get.maxDate,
        minDate = _self$get.minDate,
        dayClassNames = _self$get.dayClassNames,
        disabledDate = _self$get.disabledDate,
        multiple = _self$get.multiple,
        onMouseEnterDay = _self$get.onMouseEnterDay,
        type = _self$get.type,
        hours = _self$get.hours,
        minutes = _self$get.minutes,
        seconds = _self$get.seconds,
        disabledHours = _self$get.disabledHours,
        disabledMinutes = _self$get.disabledMinutes,
        disabledSeconds = _self$get.disabledSeconds,
        _isShowYearPicker = _self$get._isShowYearPicker,
        _isSelectTime = _self$get._isSelectTime,
        _now = _self$get._now,
        _showDate = _self$get._showDate,
        _focusDate = _self$get._focusDate;

    var values = multiple ? value || [] : [value];

    var valueDate = new Date(values[self._index] || _now);
    var showDate = new Date(_showDate || valueDate);

    var yearMonthFormat = (0, _utils._$)('yearMonthFormat');
    if (yearMonthFormat === 'yearMonthFormat') {
        yearMonthFormat = 'YYYY MM';
    }
    var format = yearMonthFormat.split(' ');
    var map = {
        'MM': h('span', null, function () {
            try {
                return [(0, _utils._$)(showDate.getMonth() + 1 + '\u6708')][0];
            } catch (e) {
                _e(e);
            }
        }.call(this), 'k-text'),
        'YYYY': h('span', null, function () {
            try {
                return [(0, _utils._$)('{n}\u5E74', { n: showDate.getFullYear() })][0];
            } catch (e) {
                _e(e);
            }
        }.call(this), 'k-text')
    };
    var panel = format.map(function (item) {
        return map[item];
    });

    return h('div', { 'tabindex': '0', 'ev-keydown': function () {
            try {
                return [self._onKeydown][0];
            } catch (e) {
                _e(e);
            }
        }.call(this) }, function () {
        try {
            return [!_isSelectTime][0];
        } catch (e) {
            _e(e);
        }
    }.call(this) ? h('div', null, [h('div', null, [h(_button2.default, { 'icon': function () {
            try {
                return [true][0];
            } catch (e) {
                _e(e);
            }
        }.call(this), 'type': 'none', 'size': 'small', 'className': 'k-prev', 'tagName': 'div', 'tabindex': function () {
            try {
                return [null][0];
            } catch (e) {
                _e(e);
            }
        }.call(this), 'ev-click': function () {
            try {
                return [self.prevYear][0];
            } catch (e) {
                _e(e);
            }
        }.call(this), 'children': [h('i', null, null, 'k-icon ion-ios-arrow-left'), h('i', null, null, 'k-icon ion-ios-arrow-left')], '_context': $this }), h(_button2.default, { 'icon': function () {
            try {
                return [true][0];
            } catch (e) {
                _e(e);
            }
        }.call(this), 'type': 'none', 'size': 'small', 'className': 'k-prev', 'tagName': 'div', 'tabindex': function () {
            try {
                return [null][0];
            } catch (e) {
                _e(e);
            }
        }.call(this), 'ev-click': function () {
            try {
                return [self.prevMonth][0];
            } catch (e) {
                _e(e);
            }
        }.call(this), 'children': h('i', null, null, 'k-icon ion-ios-arrow-left'), '_context': $this }), h('span', { 'ev-click': function () {
            try {
                return [self.showYearPicker][0];
            } catch (e) {
                _e(e);
            }
        }.call(this) }, function () {
        try {
            return [panel][0];
        } catch (e) {
            _e(e);
        }
    }.call(this), 'k-text-wrapper'), h(_button2.default, { 'icon': function () {
            try {
                return [true][0];
            } catch (e) {
                _e(e);
            }
        }.call(this), 'type': 'none', 'size': 'small', 'className': 'k-next', 'tagName': 'div', 'tabindex': function () {
            try {
                return [null][0];
            } catch (e) {
                _e(e);
            }
        }.call(this), 'ev-click': function () {
            try {
                return [self.nextYear][0];
            } catch (e) {
                _e(e);
            }
        }.call(this), 'children': [h('i', null, null, 'k-icon ion-ios-arrow-right'), h('i', null, null, 'k-icon ion-ios-arrow-right')], '_context': $this }), h(_button2.default, { 'icon': function () {
            try {
                return [true][0];
            } catch (e) {
                _e(e);
            }
        }.call(this), 'type': 'none', 'size': 'small', 'className': 'k-next', 'tagName': 'div', 'tabindex': function () {
            try {
                return [null][0];
            } catch (e) {
                _e(e);
            }
        }.call(this), 'ev-click': function () {
            try {
                return [self.nextMonth][0];
            } catch (e) {
                _e(e);
            }
        }.call(this), 'children': h('i', null, null, 'k-icon ion-ios-arrow-right'), '_context': $this })], 'k-month c-clearfix'), function () {
        try {
            return [!_isShowYearPicker][0];
        } catch (e) {
            _e(e);
        }
    }.call(this) ? h('div', null, _Vdt.utils.map(function () {
        try {
            return [[(0, _utils._$)('日'), (0, _utils._$)('一'), (0, _utils._$)('二'), (0, _utils._$)('三'), (0, _utils._$)('四'), (0, _utils._$)('五'), (0, _utils._$)('六')]][0];
        } catch (e) {
            _e(e);
        }
    }.call(this), function (value, key) {
        return h('div', null, function () {
            try {
                return [value][0];
            } catch (e) {
                _e(e);
            }
        }.call(this), 'k-weekday');
    }, this), 'k-weekdays') : undefined, function () {
        try {
            return [!_isShowYearPicker][0];
        } catch (e) {
            _e(e);
        }
    }.call(this) ? h('div', { 'ev-mouseleave': function () {
            try {
                return [self._onMouseLeaveDays][0];
            } catch (e) {
                _e(e);
            }
        }.call(this) }, ['\n            ', function () {
        var _this = this;

        try {
            return [function () {
                var ret = [];
                var start = new Date(showDate);
                var month = start.getMonth();
                start.setDate(1);
                start.setHours(0);
                start.setMinutes(0);
                start.setSeconds(0);
                var startWeekday = start.getDay();
                start.setDate(1 - startWeekday);

                var _maxDate = new Date(maxDate);
                var _minDate = new Date(minDate);

                var _loop = function _loop(i) {
                    var _date = start.getDate();
                    var _month = start.getMonth();
                    var disabled = (0, _utils2.isGT)(start, _maxDate) || (0, _utils2.isLT)(start, _minDate) || disabledDate.call(self, self.getDateString(start));
                    var isOut = _month !== month;
                    var classNames = dayClassNames ? dayClassNames.call(self, new Date(start), isOut) : null;
                    ret.push(h('div', { 'ev-click': function () {
                            try {
                                return [!disabled && self.select.bind(self, new Date(start))][0];
                            } catch (e) {
                                _e(e);
                            }
                        }.call(_this), 'ev-mouseenter': function () {
                            try {
                                return [self._onMouseEnter.bind(self, new Date(start), isOut)][0];
                            } catch (e) {
                                _e(e);
                            }
                        }.call(_this) }, function () {
                        try {
                            return [_date][0];
                        } catch (e) {
                            _e(e);
                        }
                    }.call(_this), _className(function () {
                        try {
                            return [(0, _extends3.default)({
                                "k-day": true,
                                "k-out": isOut,
                                "k-active": !isOut && values.find(function (value) {
                                    return (0, _utils2.isEqual)(new Date(value), start);
                                }),
                                "k-today": (0, _utils2.isEqual)(_now, start),
                                "k-disabled": disabled,
                                "k-hover": (0, _utils2.isEqual)(start, _focusDate)
                            }, classNames)][0];
                        } catch (e) {
                            _e(e);
                        }
                    }.call(_this))));
                    start.setDate(start.getDate() + 1);
                };

                for (var i = 0; i < 42; i++) {
                    _loop(i);
                }
                var result = [];

                var _loop2 = function _loop2(i) {
                    result.push(h('div', null, function () {
                        try {
                            return [ret.slice(7 * i, 7 * (i + 1))][0];
                        } catch (e) {
                            _e(e);
                        }
                    }.call(_this)));
                };

                for (var i = 0; i < 6; i++) {
                    _loop2(i);
                }
                return result;
            }()][0];
        } catch (e) {
            _e(e);
        }
    }.call(this), '\n        '], 'k-calendar') : undefined, function () {
        try {
            return [_isShowYearPicker][0];
        } catch (e) {
            _e(e);
        }
    }.call(this) ? h(_grid.Row, { 'className': 'k-year-picker', 'children': ['\n            ', function () {
            var _this2 = this;

            try {
                return [function () {
                    var map = {
                        MM: h(_grid.Col, { 'span': '12', 'children': h(_scrollSelect2.default, { 'data': function () {
                                    try {
                                        return [(0, _utils.range)(0, 11).map(function (i) {
                                            return { label: (0, _utils._$)(i + 1 + '\u6708'), value: i };
                                        })][0];
                                    } catch (e) {
                                        _e(e);
                                    }
                                }.call(_this2), 'value': function () {
                                    try {
                                        return [showDate.getMonth()][0];
                                    } catch (e) {
                                        _e(e);
                                    }
                                }.call(_this2), 'ev-$change:value': function () {
                                    try {
                                        return [self.onChangeMonth][0];
                                    } catch (e) {
                                        _e(e);
                                    }
                                }.call(_this2), 'children': null, '_context': $this }), '_context': $this }),
                        YYYY: h(_grid.Col, { 'span': '12', 'children': h(_scrollSelect2.default, { 'data': function () {
                                    try {
                                        return [function (value) {
                                            return (0, _utils.range)(value - 5, value + 5);
                                        }][0];
                                    } catch (e) {
                                        _e(e);
                                    }
                                }.call(_this2), 'value': function () {
                                    try {
                                        return [showDate.getFullYear()][0];
                                    } catch (e) {
                                        _e(e);
                                    }
                                }.call(_this2), 'ev-$change:value': function () {
                                    try {
                                        return [self.onChangeYear][0];
                                    } catch (e) {
                                        _e(e);
                                    }
                                }.call(_this2), 'children': null, '_context': $this }), '_context': $this })
                    };

                    return format.map(function (item) {
                        return map[item];
                    });
                }()][0];
            } catch (e) {
                _e(e);
            }
        }.call(this), '\n        '], '_context': $this }) : undefined]) : h('div', null, [h('div', null, ['\n            ', hc('<Button type=\"none\" size=\"small\" class=\"k-prev\"\n                ev-click={{ self.cancel.bind(self) }}\n            >取消</Button>'), h('span', { 'ev-click': function () {
            try {
                return [self.cancel][0];
            } catch (e) {
                _e(e);
            }
        }.call(this) }, function () {
        try {
            return [panel][0];
        } catch (e) {
            _e(e);
        }
    }.call(this), 'k-text-wrapper'), '\n            ', hc('<Button type=\"none\" size=\"small\" class=\"k-next\"\n                ev-click={{ self.confirm.bind(self) }}\n            >确认</Button>')], 'k-month c-clearfix'), h(_grid.Row, { 'children': [h(_grid.Col, { 'span': '8', 'children': h(_scrollSelect2.default, { 'data': function () {
                    try {
                        return [hours.map(function (v) {
                            return { label: (0, _utils.strPad)(v, 2), value: v };
                        })][0];
                    } catch (e) {
                        _e(e);
                    }
                }.call(this), 'value': function () {
                    try {
                        return [valueDate.getHours()][0];
                    } catch (e) {
                        _e(e);
                    }
                }.call(this), 'ev-$change:value': function () {
                    try {
                        return [self.onChangeTime.bind(self, 'Hours')][0];
                    } catch (e) {
                        _e(e);
                    }
                }.call(this), 'disabled': function () {
                    try {
                        return [disabledHours][0];
                    } catch (e) {
                        _e(e);
                    }
                }.call(this), 'children': null, '_context': $this, '_blocks': function (blocks) {
                    var _blocks = {},
                        __blocks = extend({}, blocks);
                    return (_blocks["append"] = function (parent) {
                        return ':';
                    }) && (__blocks["append"] = function (parent) {
                        var self = this;
                        return blocks["append"] ? blocks["append"].call(this, function () {
                            return _blocks["append"].call(self, parent);
                        }) : _blocks["append"].call(this, parent);
                    }), __blocks;
                }.call(this, {}) }), '_context': $this }), h(_grid.Col, { 'span': '8', 'children': h(_scrollSelect2.default, { 'data': function () {
                    try {
                        return [minutes.map(function (v) {
                            return { label: (0, _utils.strPad)(v, 2), value: v };
                        })][0];
                    } catch (e) {
                        _e(e);
                    }
                }.call(this), 'value': function () {
                    try {
                        return [valueDate.getMinutes()][0];
                    } catch (e) {
                        _e(e);
                    }
                }.call(this), 'ev-$change:value': function () {
                    try {
                        return [self.onChangeTime.bind(self, 'Minutes')][0];
                    } catch (e) {
                        _e(e);
                    }
                }.call(this), 'disabled': function () {
                    try {
                        return [disabledMinutes][0];
                    } catch (e) {
                        _e(e);
                    }
                }.call(this), 'children': null, '_context': $this, '_blocks': function (blocks) {
                    var _blocks = {},
                        __blocks = extend({}, blocks);
                    return (_blocks["append"] = function (parent) {
                        return ':';
                    }) && (__blocks["append"] = function (parent) {
                        var self = this;
                        return blocks["append"] ? blocks["append"].call(this, function () {
                            return _blocks["append"].call(self, parent);
                        }) : _blocks["append"].call(this, parent);
                    }), __blocks;
                }.call(this, {}) }), '_context': $this }), h(_grid.Col, { 'span': '8', 'children': h(_scrollSelect2.default, { 'data': function () {
                    try {
                        return [seconds.map(function (v) {
                            return { label: (0, _utils.strPad)(v, 2), value: v };
                        })][0];
                    } catch (e) {
                        _e(e);
                    }
                }.call(this), 'value': function () {
                    try {
                        return [valueDate.getSeconds()][0];
                    } catch (e) {
                        _e(e);
                    }
                }.call(this), 'ev-$change:value': function () {
                    try {
                        return [self.onChangeTime.bind(self, 'Seconds')][0];
                    } catch (e) {
                        _e(e);
                    }
                }.call(this), 'disabled': function () {
                    try {
                        return [disabledSeconds][0];
                    } catch (e) {
                        _e(e);
                    }
                }.call(this), 'children': null, '_context': $this }), '_context': $this })], '_context': $this })], 'k-time-picker', 'time'), 'k-calendar-wrapper');
};