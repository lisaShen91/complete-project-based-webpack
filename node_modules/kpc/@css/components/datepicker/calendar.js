'use strict';

exports.__esModule = true;
exports.default = undefined;

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _dec, _desc, _value2, _class, _init, _class2, _temp;

var _intact = require('intact');

var _intact2 = _interopRequireDefault(_intact);

var _calendar = require('./calendar.vdt');

var _calendar2 = _interopRequireDefault(_calendar);

var _utils = require('../utils');

var _utils2 = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var Calendar = (_dec = _intact2.default.template(), (_class = (_temp = _class2 = function (_Intact) {
    (0, _inherits3.default)(Calendar, _Intact);

    function Calendar() {
        (0, _classCallCheck3.default)(this, Calendar);
        return (0, _possibleConstructorReturn3.default)(this, _Intact.apply(this, arguments));
    }

    Calendar.prototype.defaults = function defaults() {
        return {
            value: undefined,
            maxDate: undefined,
            minDate: undefined,
            disabledDate: function disabledDate(date) {
                return false;
            },

            multiple: false,
            type: 'date',
            hours: (0, _utils.range)(0, 23),
            minutes: (0, _utils.range)(0, 59),
            seconds: (0, _utils.range)(0, 59),
            disabledHours: false,
            disabledMinutes: false,
            disabledSeconds: false,
            dayClassNames: undefined,
            onMouseEnterDay: undefined,

            _showDate: undefined,
            _now: (0, _utils2.getNowDate)(),
            _isShowYearPicker: false,
            _isSelectTime: false,
            _focusDate: undefined
        };
    };

    Calendar.prototype._init = function _init() {
        var _get = this.get(),
            value = _get.value,
            multiple = _get.multiple;

        this._index = multiple && value && value.length - 1 || 0;
    };

    Calendar.prototype.select = function select(v, e) {
        var value = this.getDateString(v);
        var type = this.get('type');
        if (!this.get('multiple')) {
            this.set('value', value, { async: true });
            if (type !== 'datetime') {
                this.trigger('hide');
            } else {
                // when we set _isSelectTime to true, the dom has
                // been replaced with time selecter, so we set the
                // _dropdown to true to tell TooltipContent that
                // we click on drodown and don't hide it
                e && (e._rawEvent._dropdown = true);
                this.set('_isSelectTime', true, { async: true });
            }
        } else {
            var values = this.get('value');
            if (!Array.isArray(values)) {
                values = [];
            } else {
                values = values.slice(0);
            }
            if (type !== 'datetime') {
                var index = values.indexOf(value);
                if (~index) {
                    values.splice(index, 1);
                } else {
                    values.push(value);
                }
            } else {
                values.push(value);
                e && (e._rawEvent._dropdown = true);
                this.set('_isSelectTime', true, { async: true });
            }
            this._index = values.length - 1;
            this.set('value', values, { async: true });
        }

        this.set('_showDate', v, { async: true });
    };

    Calendar.prototype.getDateString = function getDateString(date) {
        var _date = [date.getFullYear(), (0, _utils.strPad)(date.getMonth() + 1, 2), (0, _utils.strPad)(date.getDate(), 2)].join('-');
        if (this.get('type') !== 'datetime') {
            return _date;
        }
        var _time = [(0, _utils.strPad)(date.getHours(), 2), (0, _utils.strPad)(date.getMinutes(), 2), (0, _utils.strPad)(date.getSeconds(), 2)].join(':');
        return _date + ' ' + _time;
    };

    Calendar.prototype.prevMonth = function prevMonth() {
        this.setRelativeMonth(-1);
    };

    Calendar.prototype.nextMonth = function nextMonth(e) {
        e.preventDefault();
        this.setRelativeMonth(1);
    };

    Calendar.prototype.prevYear = function prevYear() {
        this.setRelativeYear(-1);
    };

    Calendar.prototype.nextYear = function nextYear() {
        this.setRelativeYear(1);
    };

    Calendar.prototype.setRelativeMonth = function setRelativeMonth(month) {
        var date = this.getShowDate();
        date.setMonth(date.getMonth() + month);
        this.set('_showDate', date);
    };

    Calendar.prototype.setRelativeYear = function setRelativeYear(year) {
        var date = this.getShowDate();
        date.setFullYear(date.getFullYear() + year);
        this.set('_showDate', date);
    };

    Calendar.prototype.setMonth = function setMonth(month) {
        var date = this.getShowDate();
        date.setMonth(month);
        this.set('_showDate', date);
    };

    Calendar.prototype.setYear = function setYear(year) {
        var date = this.getShowDate();
        date.setFullYear(year);
        this.set('_showDate', date);
    };

    Calendar.prototype.onChangeYear = function onChangeYear(c, value) {
        this.setYear(value);
    };

    Calendar.prototype.onChangeMonth = function onChangeMonth(c, value) {
        this.setMonth(value);
    };

    Calendar.prototype.getShowDate = function getShowDate() {
        var _get2 = this.get(),
            _showDate = _get2._showDate,
            value = _get2.value,
            _now = _get2._now,
            multiple = _get2.multiple;

        var values = multiple ? value || [] : [value];
        return new Date(_showDate || values[this._index] || _now);
    };

    Calendar.prototype.setShowDate = function setShowDate(date) {
        this.set('_showDate', date);
    };

    Calendar.prototype.showYearPicker = function showYearPicker() {
        this.set('_isShowYearPicker', !this.get('_isShowYearPicker'));
    };

    Calendar.prototype.onChangeTime = function onChangeTime(type, c, v) {
        this.isSelectTime = true;

        var _get3 = this.get(),
            value = _get3.value,
            _now = _get3._now,
            multiple = _get3.multiple;

        var valueDate = new Date((multiple ? value && value[this._index] : value) || _now);
        valueDate['set' + type](v);
        valueDate = this.getDateString(valueDate);

        if (!multiple) {
            this.set('value', valueDate);
        } else {
            var _value = void 0;
            if (value) {
                _value = value.slice(0);
                _value[this._index] = valueDate;
            } else {
                _value = [valueDate];
            }

            this.set('value', _value);
        }

        this.isSelectTime = false;
    };

    Calendar.prototype.confirm = function confirm() {
        this.refs.calendar.hide();
    };

    Calendar.prototype.cancel = function cancel(e) {
        e._rawEvent._dropdown = true;
        this.set('_isSelectTime', false);
    };

    Calendar.prototype.focusAndSelect = function focusAndSelect(e) {
        // this.element.focus();
        this._onKeydown(e);
    };

    Calendar.prototype._onMouseEnter = function _onMouseEnter(date, isOut, e) {
        var onMouseEnterDay = this.get('onMouseEnterDay');

        this.set('_focusDate', date);

        if (onMouseEnterDay) {
            onMouseEnterDay.call(this, date, isOut, e);
        }
    };

    Calendar.prototype._onMouseLeaveDays = function _onMouseLeaveDays() {
        this.set('_focusDate', null);
    };

    Calendar.prototype._onKeydown = function _onKeydown(e) {
        switch (e.keyCode) {
            case 38:
                // up
                this._focusByOffset(e, -7);
                break;
            case 40:
                // down
                this._focusByOffset(e, 7);
                break;
            case 37:
                // left
                this._focusByOffset(e, -1);
                break;
            case 39:
                // right
                this._focusByOffset(e, 1);
                break;
            case 13:
                this._selectFocusDate();
                break;
        }
    };

    Calendar.prototype._focusByOffset = function _focusByOffset(e, offset) {
        e.preventDefault();

        var _get4 = this.get(),
            _focusDate = _get4._focusDate,
            value = _get4.value,
            _showDate = _get4._showDate;

        var isSet = true;
        if (!_focusDate) {
            _focusDate = this.getShowDate();
            if (!value) isSet = false;
        } else {
            if (_showDate) {
                var _y1 = _focusDate.getFullYear();
                var _m1 = _focusDate.getMonth();
                var _y2 = _showDate.getFullYear();
                var _m2 = _showDate.getMonth();
                if (_y1 !== _y2 || _m1 !== _m2) {
                    _focusDate = new Date(_showDate);
                    _focusDate.setDate(1);
                    isSet = false;
                }
            }
        }
        if (isSet) {
            _focusDate.setDate(_focusDate.getDate() + offset);
        }

        this.set({
            '_focusDate': _focusDate,
            '_showDate': _focusDate
        }, { silent: true });
        this.update();
    };

    Calendar.prototype._selectFocusDate = function _selectFocusDate() {
        var _get5 = this.get(),
            _focusDate = _get5._focusDate,
            _isSelectTime = _get5._isSelectTime;

        if (_focusDate && !_isSelectTime) {
            this.trigger('enter:select', this);
            this.select(new Date(_focusDate));
        }
    };

    return Calendar;
}(_intact2.default), _class2.template = _calendar2.default, _class2.propTypes = {
    multiple: Boolean,
    disabledHours: Boolean,
    disabledMinutes: Boolean,
    disabledSeconds: Boolean
}, _temp), (_applyDecoratedDescriptor(_class, 'template', [_dec], (_init = (0, _getOwnPropertyDescriptor2.default)(_class, 'template'), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
        return _init;
    }
}), _class)), _class));
exports.default = Calendar;
module.exports = exports['default'];