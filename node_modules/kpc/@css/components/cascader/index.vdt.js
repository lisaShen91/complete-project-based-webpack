'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _input = require('../input');

var _input2 = _interopRequireDefault(_input);

var _dropdown = require('../dropdown');

var _dropdown2 = _interopRequireDefault(_dropdown);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = function (obj, _Vdt, blocks, $callee) {
    var _this = this;

    _Vdt || (_Vdt = Vdt);
    obj || (obj = {});
    blocks || (blocks = {});
    var h = _Vdt.miss.h,
        hc = _Vdt.miss.hc,
        hu = _Vdt.miss.hu,
        widgets = this && this.widgets || {},
        _blocks = {},
        __blocks = {},
        __u = _Vdt.utils,
        extend = __u.extend,
        _e = __u.error,
        _className = __u.className,
        __o = __u.Options,
        _getModel = __o.getModel,
        _setModel = __o.setModel,
        _setCheckboxModel = __u.setCheckboxModel,
        _detectCheckboxChecked = __u.detectCheckboxChecked,
        _setSelectModel = __u.setSelectModel,
        self = this.data,
        $this = this,
        scope = obj,
        Animate = self && self.Animate,
        parent = ($callee || {})._super;

    var _self$get = self.get(),
        data = _self$get.data,
        className = _self$get.className,
        style = _self$get.style,
        value = _self$get.value,
        trigger = _self$get.trigger,
        changeOnSelect = _self$get.changeOnSelect,
        format = _self$get.format,
        filterable = _self$get.filterable,
        keywords = _self$get.keywords;

    var labelObj = {
        label: null,
        labels: [],
        values: []
    };

    var Options = function Options(props) {
        var data = props.data;
        var level = props.level;
        var ret = [];

        // show loading
        if (!data.length) {
            return h('i', null, null, 'ion-load-c icon-loading');
        }

        data.forEach(function (item, index) {
            var _self$handleProps = self.handleProps(item, labelObj, level),
                active = _self$handleProps.active;

            var Item = function Item() {
                var events = {};
                events['ev-click'] = self._onClick.bind(self, item, level);
                if (trigger === 'hover') {
                    events['ev-mouseenter'] = self._onClick.bind(self, item, level);
                }
                if (!changeOnSelect) {
                    events['ev-select'] = self._onSelect;
                }

                return h(_dropdown.DropdownItem, (0, _extends3.default)({ 'disabled': function () {
                        try {
                            return [item.disabled][0];
                        } catch (e) {
                            _e(e);
                        }
                    }.call(_this), 'className': _className(function () {
                        try {
                            return [{ 'k-active': active }][0];
                        } catch (e) {
                            _e(e);
                        }
                    }.call(_this)) }, function () {
                    try {
                        return [events][0];
                    } catch (e) {
                        _e(e);
                    }
                }.call(_this), { 'children': ['\n                    ', function () {
                        try {
                            return [item.template ? item.template(item, index) : item.label][0];
                        } catch (e) {
                            _e(e);
                        }
                    }.call(_this), '\n                    ', function () {
                        try {
                            return [item.children][0];
                        } catch (e) {
                            _e(e);
                        }
                    }.call(_this) ? h('i', null, null, 'k-arrow ion-ios-arrow-right') : undefined], '_context': $this }));
            };

            ret.push(!item.children ? h(Item, { 'children': null, '_context': $this }) : h(_dropdown2.default, { 'position': function () {
                    try {
                        return [{ my: 'left top', at: 'right top', collisionDirection: ['left'] }][0];
                    } catch (e) {
                        _e(e);
                    }
                }.call(_this), 'of': 'parent', 'disabled': function () {
                    try {
                        return [item.disabled][0];
                    } catch (e) {
                        _e(e);
                    }
                }.call(_this), 'trigger': function () {
                    try {
                        return [trigger][0];
                    } catch (e) {
                        _e(e);
                    }
                }.call(_this), 'show': function () {
                    try {
                        return [active][0];
                    } catch (e) {
                        _e(e);
                    }
                }.call(_this), 'children': [h(Item, { 'children': null, '_context': $this }), h(_dropdown.DropdownMenu, { 'className': _className(function () {
                        try {
                            return [{
                                "k-select-dropdown": true,
                                "k-cascader-dropdown": true
                            }][0];
                        } catch (e) {
                            _e(e);
                        }
                    }.call(_this)), 'ev-show': function () {
                        try {
                            return [self._onSubMenuShow.bind(self, item)][0];
                        } catch (e) {
                            _e(e);
                        }
                    }.call(_this), 'children': h(Options, { 'data': function () {
                            try {
                                return [item.children][0];
                            } catch (e) {
                                _e(e);
                            }
                        }.call(_this), 'level': function () {
                            try {
                                return [level + 1][0];
                            } catch (e) {
                                _e(e);
                            }
                        }.call(_this), 'children': null, '_context': $this }), '_context': $this })], '_context': $this }));
        });

        return ret;
    };

    var Menu = void 0;
    if (!filterable || !keywords) {
        Menu = h(_dropdown.DropdownMenu, { 'className': _className(function () {
                try {
                    return [{
                        "k-select-dropdown": true,
                        "k-cascader-dropdown": true
                    }][0];
                } catch (e) {
                    _e(e);
                }
            }.call(this)), 'ev-$change:show': function () {
                try {
                    return [self._onChangeShow][0];
                } catch (e) {
                    _e(e);
                }
            }.call(this), 'key': 'cascader', 'children': h(Options, { 'data': function () {
                    try {
                        return [data][0];
                    } catch (e) {
                        _e(e);
                    }
                }.call(this), 'level': function () {
                    try {
                        return [0][0];
                    } catch (e) {
                        _e(e);
                    }
                }.call(this), 'children': null, '_context': $this }), '_context': $this }, null, null, null, function (i) {
            widgets['cascader'] = i;
        });
    } else {
        Menu = h(_dropdown.DropdownMenu, { 'ev-$changed:show': function () {
                try {
                    return [self._position][0];
                } catch (e) {
                    _e(e);
                }
            }.call(this), 'className': _className(function () {
                try {
                    return [{
                        "k-select-dropdown": true,
                        "k-cascader-filterable-dropdown": true
                    }][0];
                } catch (e) {
                    _e(e);
                }
            }.call(this)), 'ev-$change:show': function () {
                try {
                    return [self._onChangeShow][0];
                } catch (e) {
                    _e(e);
                }
            }.call(this), 'key': 'filterable', 'children': _Vdt.utils.map(function () {
                try {
                    return [self._filter()][0];
                } catch (e) {
                    _e(e);
                }
            }.call(this), function (value, key) {
                return h(_dropdown.DropdownItem, { 'ev-select': function () {
                        try {
                            return [self._selectByFilter.bind(self, value)][0];
                        } catch (e) {
                            _e(e);
                        }
                    }.call(this), 'disabled': function () {
                        try {
                            return [value.disabled][0];
                        } catch (e) {
                            _e(e);
                        }
                    }.call(this), 'children': function () {
                        var _this2 = this;

                        try {
                            return [function () {
                                // highlight keywords
                                var label = value.map(function (item) {
                                    return item.label;
                                }).join(' / ');
                                var labels = label.split(keywords);
                                var length = labels.length;
                                return labels.map(function (item, index) {
                                    var ret = [item];
                                    if (index !== length - 1) {
                                        ret.push(h('em', null, function () {
                                            try {
                                                return [keywords][0];
                                            } catch (e) {
                                                _e(e);
                                            }
                                        }.call(_this2)));
                                    }
                                    return ret;
                                });
                            }()][0];
                        } catch (e) {
                            _e(e);
                        }
                    }.call(this), '_context': $this });
            }, this), '_context': $this }, null, null, null, function (i) {
            widgets['menu'] = i;
        });
    }

    labelObj.label = format.call(this, labelObj.values);

    return function () {
        var _obj = { 'Menu': function () {
                try {
                    return [Menu][0];
                } catch (e) {
                    _e(e);
                }
            }.call(this), 'className': 'k-cascader', 'labelObj': function () {
                try {
                    return [labelObj][0];
                } catch (e) {
                    _e(e);
                }
            }.call(this), 'children': null };
        if (_obj.hasOwnProperty("arguments")) {
            extend(_obj, _obj.arguments === true ? obj : _obj.arguments);
            delete _obj.arguments;
        }
        return parent.call(this, _obj, _Vdt, blocks, parent);
    }.call(this);
};