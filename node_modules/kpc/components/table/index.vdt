import Checkbox from '../checkbox';
import Radio from '../radio';
import Row from './row';
import {normalize} from 'intact';
import Column from './column';

const {
    checkType, scheme, checkedKeys, data, rowKey, 
    className, fixHeader, noDataTemplate, disableRow,
    resizable, expand, expandedKeys, type,
    style, rowClassName, children, sort, group,
} = self.get();

let colSpan = checkType === 'checkbox' || checkType === 'radio' ? 1 : 0;
const expandable = typeof expand === 'function';
const _scheme = {};

let prevItem = checkType === 'checkbox' || checkType === 'radio' ? 
    {minWidth: 40} : {};

const theadCreator = () => {
    const keys = {};
    return <thead>
        <tr>
            <th v-if={{ checkType === 'checkbox' }} class="k-th-check">
                <Checkbox value={{ self.isCheckAll() }}
                    ev-click={{ self._toggleCheckAll }}
                />
            </th>
            <th v-else-if={{ checkType === 'radio' }} class="k-th-check"></th>
            {{ __u.map(scheme, (item, key) => {
                colSpan++;
                keys[key] = true;

                if (!__u.isObject(item) || item.type) {
                    item = {title: item};
                }

                // because we use the last resize handle to controll the previous column
                // so we bind prevItem here
                const dragStart = self._dragStart.bind(self, prevItem);
                prevItem = item;

                return <Column {{ ...item }}
                    key={{ key }}
                    $parent={{ self }} 
                    ev-click={{ item.sortable ? self._sort.bind(self, key, item) : undefined }}
                    ev-dragStart={{ dragStart }}
                    v-model={{ `group.${key}` }}
                />
            }) }}
            {{  // for using TableColumn as children
                __u.map(children ? (Array.isArray(children) ? children : [children]) : children, vNode => {
                    if (vNode.tag === Column) {
                        colSpan++;

                        const props = {...vNode.props, $parent: self};
                        vNode.props = props;
                        if (props.key == null) {
                            _e(new Error('key for TableColumn must be specified.'));
                        } else if (/^\d+$/.test(props.key)) {
                            // avoid digital key
                            _e(new Error('don\'t use digits as key.'));
                        } else if (keys[props.key]) {
                            _e(new Error(`Reduplicated key: ${props.key}`));
                        }

                        keys[props.key] = true;
                        props.value = group[props.key];

                        const dragStart = self._dragStart.bind(self, prevItem);
                        prevItem = props;

                        // add a flag to detect if the vNode has attached events of bellow
                        // we should not attach them again, when the same vNode come again
                        if (!vNode._$) {
                            props['ev-$change:value'] = (c, v) => self.set(`group.${props.key}`, v);
                            props['ev-click'] = props.sortable ? self._sort.bind(self, props.key, props) : undefined;
                            props['ev-dragStart'] = dragStart;
                            vNode._$ = true;
                        }
                        _scheme[props.key] = {
                            title: props.title,
                            template: props.template || props.default,
                        };
                        return vNode;
                    }
                }) 
            }}
        </tr>
    </thead>
};

const thead = theadCreator();

const tbody = <tbody>
    {{ data && data.length ? 
        __u.map(data, (value, index) => {
            const key = rowKey.call(self, value, index);
            const disabled = disableRow.call(self, value, index);
            const className = rowClassName.call(self, value, index);
            const tr = <Row key={{ key }}
                ev-click={{ self._clickRow.bind(self, value, index, key) }}
                class={{ {
                    'k-disabled': disabled,
                    [className]: className,
                    'k-checked': self.isChecked(key), 
                } }}
                ev-$destroyed={{ self._onRowDestroyed.bind(self, key) }}
            >
                <td v-if={{ checkType === 'checkbox' }}>
                    <Checkbox v-model="checkedKeys" name="k-table-checkbox"
                        trueValue={{ key }}
                        disabled={{ disabled }}
                    />
                </td>
                <td v-else-if={{ checkType === 'radio' }}>
                    <Radio v-model="checkedKey" name="k-table-radio"
                        trueValue={{ key }}
                        disabled={{ disabled }}
                    />
                </td>
                {{ __u.map(__u.extend({}, scheme, _scheme), (item, key) => {
                    let td;
                    if (__u.isObject(item) && item.template) {
                        if (typeof item.template === 'function') {
                            td = item.template.call(self, value, index);
                            // for Intact-Vue
                            if (normalize) {
                                td = normalize(td);
                            }
                        } else {
                            td = item.template;
                        }
                    } else if (value[key] !== undefined) {
                        td = value[key];
                    } else {
                        let obj = value,
                            keys = key.split('.'),
                            i = 0;
                        while (obj != null && i < keys.length) {
                            obj = obj[keys[i++]];
                        }
                        td = (i && i === keys.length) ? obj : null;
                    }
                    return <td title={{ typeof td === 'string' || typeof td === 'number' ? 
                        td : undefined 
                    }}>{{ typeof td === 'boolean' ? String(td) : td }}</td>
                }) }}
            </Row>;

            if (expandable && expandedKeys.indexOf(key) > -1) {
                return [
                    tr,
                    <tr class="k-expand" key={{ `${key}.expand` }}>
                        <td colspan={{ colSpan }}>{{ expand.call(self, value, index) }}</td>
                    </tr>
                ]
            } else {
                return tr;
            }
        }) :
        <tr key="table_no_data">
            <td colspan={{ colSpan }} class="k-no-data">
                <b:no-data>{{ noDataTemplate }}</b:no-data>
            </td>
        </tr>
    }}
</tbody>

const classNameObj = {
    'k-table-wrapper': true,
    [className]: className,
    [`k-${type}`]: type !== 'default',
};

const table = <table class="k-table"
    ref={{ dom => self.table = dom }}
>
    {{ thead }}
    {{ tbody }}
</table>

<div class={{ classNameObj }} style={{ style }}>
    <div v-if={{ fixHeader }} class="k-fixed"
        style={{ {paddingRight: self.get('_padding') + 'px'} }}
        ref={{ dom => self.header = dom }}
    >
        <table class="k-table">
            {{ theadCreator() }}
        </table>
    </div>
    {{ fixHeader ? 
        <div class="k-scroll"
            style={{ typeof fixHeader === 'number' || typeof fixHeader === 'string' ?
                {maxHeight: `${fixHeader}px`} : undefined
            }}
            ref={{ dom => self.scroll = dom }}
        >{{ table }}</div> :
        table
    }}
</div>
